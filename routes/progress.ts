import express, { Request, Response } from 'express';
import { ProgressMeasurement, Client } from '../models';
import { asyncHandler } from '../utils/asyncHandler';
import { requireAuth, AuthRequest } from '../middleware/auth';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/:clientId', requireAuth, asyncHandler(async (req: AuthRequest, res: Response) => {
  const { clientId } = req.params;
  const { page = 1, limit = 50 } = req.query;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
  const client = await Client.findOne({
    where: { 
      id: clientId,
      trainer_id: req.user!.id 
    }
  });

  if (!client) {
    return res.status(404).json({ error: 'Client not found' });
  }

  const offset = (Number(page) - 1) * Number(limit);

  const measurements = await ProgressMeasurement.findAndCountAll({
    where: { clientId },
    order: [['date', 'DESC']],
    limit: Number(limit),
    offset,
  });

  res.json({
    measurements: measurements.rows,
    total: measurements.count,
    page: Number(page),
    totalPages: Math.ceil(measurements.count / Number(limit)),
  });
}));

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
router.post('/', requireAuth, asyncHandler(async (req: AuthRequest, res: Response) => {
  const { clientId, date, weight, chest, waist, hips, biceps, notes } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
  const client = await Client.findOne({
    where: { 
      id: clientId,
      trainer_id: req.user!.id 
    }
  });

  if (!client) {
    return res.status(404).json({ error: 'Client not found' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ
  if (!weight && !chest && !waist && !hips && !biceps) {
    return res.status(400).json({ error: 'At least one measurement is required' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
  const existingMeasurement = await ProgressMeasurement.findOne({
    where: { clientId, date }
  });

  if (existingMeasurement) {
    return res.status(400).json({ error: 'Measurement for this date already exists' });
  }

  const measurement = await ProgressMeasurement.create({
    clientId,
    date,
    weight,
    chest,
    waist,
    hips,
    biceps,
    notes,
  });

  res.status(201).json(measurement);
}));

// –û–±–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
router.put('/:id', requireAuth, asyncHandler(async (req: AuthRequest, res: Response) => {
  const { id } = req.params;
  const { date, weight, chest, waist, hips, biceps, notes } = req.body;

  const measurement = await ProgressMeasurement.findOne({
    where: { id },
    include: [{
      model: Client,
      as: 'Client',
      where: { trainer_id: req.user!.id }
    }]
  });

  if (!measurement) {
    return res.status(404).json({ error: 'Measurement not found' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ
  if (!weight && !chest && !waist && !hips && !biceps) {
    return res.status(400).json({ error: 'At least one measurement is required' });
  }

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
  if (date && date !== measurement.date) {
    const existingMeasurement = await ProgressMeasurement.findOne({
      where: { 
        clientId: measurement.clientId, 
        date,
        id: { [require('sequelize').Op.ne]: id }
      }
    });

    if (existingMeasurement) {
      return res.status(400).json({ error: 'Measurement for this date already exists' });
    }
  }

  await measurement.update({
    date,
    weight,
    chest,
    waist,
    hips,
    biceps,
    notes,
  });

  res.json(measurement);
}));

// –£–¥–∞–ª–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
router.delete('/:id', requireAuth, asyncHandler(async (req: AuthRequest, res: Response) => {
  const { id } = req.params;
  console.log(`üóëÔ∏è Attempting to delete measurement with ID: ${id}`);
  console.log(`üë§ User ID: ${req.user!.id}`);

  const measurement = await ProgressMeasurement.findOne({
    where: { id },
    include: [{
      model: Client,
      as: 'Client',
      where: { trainer_id: req.user!.id }
    }]
  });

  console.log(`üîç Found measurement:`, measurement ? 'Yes' : 'No');

  if (!measurement) {
    console.log(`‚ùå Measurement not found or user doesn't have access`);
    return res.status(404).json({ error: 'Measurement not found' });
  }

  console.log(`‚úÖ Measurement found, proceeding with deletion`);
  await measurement.destroy();
  console.log(`‚úÖ Measurement deleted successfully`);
  res.status(204).send();
}));

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/:clientId/stats', requireAuth, asyncHandler(async (req: AuthRequest, res: Response) => {
  const { clientId } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
  const client = await Client.findOne({
    where: { 
      id: clientId,
      trainer_id: req.user!.id 
    }
  });

  if (!client) {
    return res.status(404).json({ error: 'Client not found' });
  }

  const measurements = await ProgressMeasurement.findAll({
    where: { clientId },
    order: [['date', 'ASC']],
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Å—É
  const weightMeasurements = measurements.filter(m => m.weight !== null);
  const currentWeight = weightMeasurements.length > 0 ? weightMeasurements[weightMeasurements.length - 1].weight : null;
  const initialWeight = weightMeasurements.length > 0 ? weightMeasurements[0].weight : null;
  const weightChange = currentWeight && initialWeight ? currentWeight - initialWeight : null;

  // –†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ü–µ–ª–∏
  let weightGoalProgress = null;
  if (currentWeight && initialWeight && client.targetWeight) {
    const totalDistance = Math.abs(initialWeight - client.targetWeight);
    const currentDistance = Math.abs(currentWeight - client.targetWeight);
    const progress = Math.max(0, Math.min(100, ((totalDistance - currentDistance) / totalDistance) * 100));
    weightGoalProgress = {
      targetWeight: client.targetWeight,
      progress: Math.round(progress),
      remaining: Math.abs(currentWeight - client.targetWeight),
      isGoalAchieved: Math.abs(currentWeight - client.targetWeight) < 0.5 // –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 0.5 –∫–≥
    };
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–º–∞–º
  const volumeStats = {
    chest: getVolumeStats(measurements, 'chest'),
    waist: getVolumeStats(measurements, 'waist'),
    hips: getVolumeStats(measurements, 'hips'),
    biceps: getVolumeStats(measurements, 'biceps'),
  };

  res.json({
    totalMeasurements: measurements.length,
    weightMeasurements: weightMeasurements.length,
    currentWeight,
    initialWeight,
    weightChange,
    weightGoalProgress,
    volumeStats,
    lastMeasurement: measurements.length > 0 ? measurements[measurements.length - 1] : null,
  });
}));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–º–æ–≤
function getVolumeStats(measurements: any[], field: string) {
  const fieldMeasurements = measurements.filter(m => m[field] !== null);
  if (fieldMeasurements.length === 0) return null;

  const current = fieldMeasurements[fieldMeasurements.length - 1][field];
  const initial = fieldMeasurements[0][field];
  const change = current - initial;

  return {
    current,
    initial,
    change,
    measurements: fieldMeasurements.length,
  };
}

export default router; 