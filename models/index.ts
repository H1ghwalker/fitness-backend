import { Sequelize } from 'sequelize';
import { initClientModel, Client } from './client';
import { initUserModel, User } from './user';
import { initSessionModel, Session } from './session';
import { initExerciseModel, Exercise } from './exercise';
import { initWorkoutTemplateModel, WorkoutTemplate } from './workoutTemplate';
import { initWorkoutExerciseModel, WorkoutExercise } from './workoutExercise';

const sequelize = new Sequelize(
  process.env.DATABASE_URL || 'postgres://fitness_user:fitness_password@localhost:5432/fitness_db',
  { dialect: 'postgres' }
);

export const initializeModels = () => {
  console.log('üîß Starting model initialization...');
  console.log('üîß Database URL:', process.env.DATABASE_URL ? 'Set' : 'Not set');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    console.log('üîß Initializing User model...');
    initUserModel(sequelize);
    
    console.log('üîß Initializing Client model...');
    initClientModel(sequelize);
    
    console.log('üîß Initializing Session model...');
    initSessionModel(sequelize);
    
    console.log('üîß Initializing Exercise model...');
    initExerciseModel(sequelize);
    
    console.log('üîß Initializing WorkoutTemplate model...');
    initWorkoutTemplateModel(sequelize);
    
    console.log('üîß Initializing WorkoutExercise model...');
    initWorkoutExerciseModel(sequelize);

    if (!User || !Client || !Exercise || !WorkoutTemplate || !WorkoutExercise) {
      throw new Error('One or more models failed to initialize');
    }

    console.log('üîß All models initialized successfully');

    // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è Client
    console.log('üîß Setting up Client associations...');
    Client.belongsTo(User, { 
      foreignKey: 'user_id', 
      as: 'User',
      scope: {
        role: 'Client'
      }
    }); 
    // –ö–ª–∏–µ–Ω—Ç —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ)

    User.hasOne(Client, { 
      foreignKey: 'user_id', 
      as: 'Client',
      scope: {
        role: 'Client'
      }
    });
    // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (MVP: 1:1)

    Client.belongsTo(User, { 
      foreignKey: 'trainer_id', 
      as: 'Trainer',
      scope: {
        role: 'Trainer'
      }
    });
    // –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç—Ä–µ–Ω–µ—Ä—É (—Ç—Ä–µ–Ω–µ—Ä ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

    User.hasMany(Client, { 
      foreignKey: 'trainer_id', 
      as: 'TrainerClients',
      scope: {
        role: 'Trainer'
      }
    });
    // –¢—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (1:M)

    // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è Session
    console.log('üîß Setting up Session associations...');
    Session.belongsTo(User, { 
      foreignKey: 'trainerId',
      as: 'Trainer',
      scope: {
        role: 'Trainer'
      }
    });
    // –°–µ—Å—Å–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ç—Ä–µ–Ω–µ—Ä—É (—Ç—Ä–µ–Ω–µ—Ä ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)

    Session.belongsTo(Client, { 
      foreignKey: 'clientId',
      as: 'Client',
      onDelete: 'CASCADE'
    });
    // –°–µ—Å—Å–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É (—á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É clients)

    Client.hasMany(Session, { 
      foreignKey: 'clientId',
      as: 'Sessions',
      onDelete: 'CASCADE'
    });
    // –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ —Å–µ—Å—Å–∏–π (1:M)

    User.hasMany(Session, { 
      foreignKey: 'trainerId',
      as: 'TrainerSessions',
      scope: {
        role: 'Trainer'
      }
    });
    
    // –¢—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–≥–æ —Å–µ—Å—Å–∏–π (1:M)
    
    // Session –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    Session.belongsTo(WorkoutTemplate, {
      foreignKey: 'workoutTemplateId',
      as: 'WorkoutTemplate'
    });
    WorkoutTemplate.hasMany(Session, {
      foreignKey: 'workoutTemplateId',
      as: 'Sessions'
    });
    
    // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è TrainingProgram (–µ—Å–ª–∏ –µ—Å—Ç—å)
    // Client.belongsToMany(TrainingProgram, { through: 'ClientPrograms' });
    // TrainingProgram.belongsToMany(Client, { through: 'ClientPrograms' });
    // User.hasMany(TrainingProgram, { foreignKey: 'trainerId', as: 'TrainingPrograms' });

    // –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è Exercise
    console.log('üîß Setting up Exercise associations...');
    Exercise.belongsTo(User, {
      foreignKey: 'createdBy',
      as: 'Creator',
      scope: { role: 'Trainer' }
    });
    User.hasMany(Exercise, {
      foreignKey: 'createdBy',
      as: 'CreatedExercises'
    });

    // WorkoutTemplate –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç—Ä–µ–Ω–µ—Ä—É
    WorkoutTemplate.belongsTo(User, {
      foreignKey: 'createdBy',
      as: 'Creator',
      scope: { role: 'Trainer' }
    });
    User.hasMany(WorkoutTemplate, {
      foreignKey: 'createdBy',
      as: 'WorkoutTemplates'
    });

    // WorkoutTemplate —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ WorkoutExercise
    WorkoutTemplate.hasMany(WorkoutExercise, {
      foreignKey: 'workoutTemplateId',
      as: 'Exercises',
      onDelete: 'CASCADE'
    });
    WorkoutExercise.belongsTo(WorkoutTemplate, {
      foreignKey: 'workoutTemplateId',
      as: 'WorkoutTemplate'
    });

    // WorkoutExercise —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ Exercise
    WorkoutExercise.belongsTo(Exercise, {
      foreignKey: 'exerciseId',
      as: 'Exercise'
    });
    Exercise.hasMany(WorkoutExercise, {
      foreignKey: 'exerciseId',
      as: 'WorkoutExercises'
    });

    console.log('‚úÖ All associations set up successfully');
    console.log('‚úÖ Model initialization completed');
  } catch (error) {
    console.error('‚ùå Error during model initialization:', error);
    throw error;
  }
};

export default sequelize;
export { User, Client, Session, Exercise, WorkoutTemplate, WorkoutExercise };
